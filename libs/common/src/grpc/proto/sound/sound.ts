// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.4
//   protoc               v3.12.4
// source: sound.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "sound";

export interface Empty {
}

export interface PlayRequest {
  fileName: string;
  volume: number;
  repeatCount: number;
  isWaitUntilDone: boolean;
}

export interface PlayResponse {
  fileName: string;
  volume: number;
  repeatCount: number;
  isWaitUntilDone: boolean;
}

export interface ListResponse {
  list: string[];
}

export interface DeleteRequest {
  fileName: string;
}

export interface DeleteResponse {
  fileName: string;
}

export const SOUND_PACKAGE_NAME = "sound";

export interface SoundGrpcServiceClient {
  play(request: PlayRequest, metadata?: Metadata): Observable<PlayResponse>;

  stop(request: Empty, metadata?: Metadata): Observable<Empty>;

  list(request: Empty, metadata?: Metadata): Observable<ListResponse>;

  delete(request: DeleteRequest, metadata?: Metadata): Observable<DeleteResponse>;

  getPlaying(request: Empty, metadata?: Metadata): Observable<PlayResponse>;
}

export interface SoundGrpcServiceController {
  play(request: PlayRequest, metadata?: Metadata): Promise<PlayResponse> | Observable<PlayResponse> | PlayResponse;

  stop(request: Empty, metadata?: Metadata): Promise<Empty> | Observable<Empty> | Empty;

  list(request: Empty, metadata?: Metadata): Promise<ListResponse> | Observable<ListResponse> | ListResponse;

  delete(
    request: DeleteRequest,
    metadata?: Metadata,
  ): Promise<DeleteResponse> | Observable<DeleteResponse> | DeleteResponse;

  getPlaying(request: Empty, metadata?: Metadata): Promise<PlayResponse> | Observable<PlayResponse> | PlayResponse;
}

export function SoundGrpcServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["play", "stop", "list", "delete", "getPlaying"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SoundGrpcService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SoundGrpcService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SOUND_GRPC_SERVICE_NAME = "SoundGrpcService";
