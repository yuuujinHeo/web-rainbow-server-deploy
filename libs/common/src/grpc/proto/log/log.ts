// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.4
//   protoc               v3.12.4
// source: log.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "log";

export interface Empty {
}

export interface SEMAlarm {
  code: number;
  detail?: string | undefined;
  operationName: string;
  description?: string | undefined;
}

export interface SEMAlarmActive {
  code: number;
  state: string;
}

export interface SEMAlarmLog {
  code: number;
  detail?: string | undefined;
  operationName: string;
  description?: string | undefined;
  state: string;
  createAt: string;
}

/** Request, Response ------------------------------------------- */
export interface GetSEMAlarmDefineRequest {
  pageNo?: number | undefined;
  pageSize?: number | undefined;
  searchText?: string | undefined;
  searchType?: string | undefined;
  sortOption?: string | undefined;
  sortDirection?: string | undefined;
  dateFrom?: string | undefined;
  dateTo?: string | undefined;
}

export interface GetSEMAlarmDefineResponse {
  list: SEMAlarm[];
  pageSize?: number | undefined;
  totalCount?: number | undefined;
  totalPage?: number | undefined;
}

export interface PostSEMAlarmDefineRequest {
  code: number;
  detail?: string | undefined;
  operationName: string;
  description?: string | undefined;
}

export interface DeleteSEMAlarmDefineRequest {
  code: number;
}

export interface DeleteSEMAlarmDefineResponse {
  code: number;
  detail?: string | undefined;
  operationName: string;
  description?: string | undefined;
}

export interface GetSEMAlarmActiveResponse {
  list: SEMAlarmActive[];
}

export interface SEMAlarmRequest {
  code: number;
  detail?: string | undefined;
  state: string;
}

export interface SEMAlarmResponse {
  code: number;
  detail?: string | undefined;
  state: string;
  operationName: string;
  description?: string | undefined;
  createAt: string;
}

export interface GetSEMAlarmLogRequest {
  pageNo?: number | undefined;
  pageSize?: number | undefined;
  searchText?: string | undefined;
  searchType?: string | undefined;
  sortOption?: string | undefined;
  sortDirection?: string | undefined;
  dateFrom?: string | undefined;
  dateTo?: string | undefined;
}

export interface GetSEMAlarmLogResponse {
  list: SEMAlarmLog[];
  pageSize?: number | undefined;
  totalCount?: number | undefined;
  totalPage?: number | undefined;
}

export interface PostSEMAlarmRequest {
  code: number;
  state: string;
}

export interface PostSEMAlarmResponse {
  code: number;
  state: string;
}

export interface DeleteSEMAlarmRequest {
  code?: number | undefined;
  dateFrom?: string | undefined;
  dateTo?: string | undefined;
}

export interface DeleteSEMAlarmResponse {
}

export interface SEMGeneralLogRequest {
  date: string;
}

export interface SEMGeneralLogResponse {
  date: string;
}

export interface GetSEMGeneralLogResponse {
  data: string;
}

export interface DeleteSEMGeneralLogRequest {
  dateFrom: string;
  dateTo: string;
}

export interface DeleteSEMGeneralLogResponse {
}

export interface PostSEMGeneralLogRequest {
  scope: string;
  operationName: string;
  operationStatus: string;
  data?: string | undefined;
}

export interface PostSEMGeneralLogResponse {
  scope: string;
  operationName: string;
  operationStatus: string;
  data?: string | undefined;
}

export const LOG_PACKAGE_NAME = "log";

export interface SEMLogGrpcServiceClient {
  /** Define */

  getSemAlarmDefine(request: GetSEMAlarmDefineRequest, metadata?: Metadata): Observable<GetSEMAlarmDefineResponse>;

  postSemAlarmDefine(request: PostSEMAlarmDefineRequest, metadata?: Metadata): Observable<PostSEMAlarmDefineRequest>;

  deleteSemAlarmDefine(
    request: DeleteSEMAlarmDefineRequest,
    metadata?: Metadata,
  ): Observable<DeleteSEMAlarmDefineResponse>;

  deleteSemAlarmDefineAll(request: Empty, metadata?: Metadata): Observable<Empty>;

  /** AlarmActive */

  getSemAlarmActive(request: Empty, metadata?: Metadata): Observable<GetSEMAlarmActiveResponse>;

  semAlarm(request: SEMAlarmRequest, metadata?: Metadata): Observable<SEMAlarmResponse>;

  deleteSemAlarm(request: DeleteSEMAlarmRequest, metadata?: Metadata): Observable<DeleteSEMAlarmResponse>;

  deleteSemAlarmAll(request: Empty, metadata?: Metadata): Observable<DeleteSEMAlarmResponse>;

  /** AlarmLog */

  getSemAlarmLog(request: GetSEMAlarmLogRequest, metadata?: Metadata): Observable<GetSEMAlarmLogResponse>;

  postSemAlarmLog(request: PostSEMAlarmRequest, metadata?: Metadata): Observable<PostSEMAlarmResponse>;

  deleteSemAlarmLog(request: DeleteSEMAlarmRequest, metadata?: Metadata): Observable<DeleteSEMAlarmResponse>;

  /** GeneralLog (not used) */

  getSemGeneralLog(request: SEMGeneralLogRequest, metadata?: Metadata): Observable<GetSEMGeneralLogResponse>;

  deleteSemGeneralLog(
    request: DeleteSEMGeneralLogRequest,
    metadata?: Metadata,
  ): Observable<DeleteSEMGeneralLogResponse>;

  postSemGeneralLog(request: PostSEMGeneralLogRequest, metadata?: Metadata): Observable<PostSEMGeneralLogResponse>;
}

export interface SEMLogGrpcServiceController {
  /** Define */

  getSemAlarmDefine(
    request: GetSEMAlarmDefineRequest,
    metadata?: Metadata,
  ): Promise<GetSEMAlarmDefineResponse> | Observable<GetSEMAlarmDefineResponse> | GetSEMAlarmDefineResponse;

  postSemAlarmDefine(
    request: PostSEMAlarmDefineRequest,
    metadata?: Metadata,
  ): Promise<PostSEMAlarmDefineRequest> | Observable<PostSEMAlarmDefineRequest> | PostSEMAlarmDefineRequest;

  deleteSemAlarmDefine(
    request: DeleteSEMAlarmDefineRequest,
    metadata?: Metadata,
  ): Promise<DeleteSEMAlarmDefineResponse> | Observable<DeleteSEMAlarmDefineResponse> | DeleteSEMAlarmDefineResponse;

  deleteSemAlarmDefineAll(request: Empty, metadata?: Metadata): Promise<Empty> | Observable<Empty> | Empty;

  /** AlarmActive */

  getSemAlarmActive(
    request: Empty,
    metadata?: Metadata,
  ): Promise<GetSEMAlarmActiveResponse> | Observable<GetSEMAlarmActiveResponse> | GetSEMAlarmActiveResponse;

  semAlarm(
    request: SEMAlarmRequest,
    metadata?: Metadata,
  ): Promise<SEMAlarmResponse> | Observable<SEMAlarmResponse> | SEMAlarmResponse;

  deleteSemAlarm(
    request: DeleteSEMAlarmRequest,
    metadata?: Metadata,
  ): Promise<DeleteSEMAlarmResponse> | Observable<DeleteSEMAlarmResponse> | DeleteSEMAlarmResponse;

  deleteSemAlarmAll(
    request: Empty,
    metadata?: Metadata,
  ): Promise<DeleteSEMAlarmResponse> | Observable<DeleteSEMAlarmResponse> | DeleteSEMAlarmResponse;

  /** AlarmLog */

  getSemAlarmLog(
    request: GetSEMAlarmLogRequest,
    metadata?: Metadata,
  ): Promise<GetSEMAlarmLogResponse> | Observable<GetSEMAlarmLogResponse> | GetSEMAlarmLogResponse;

  postSemAlarmLog(
    request: PostSEMAlarmRequest,
    metadata?: Metadata,
  ): Promise<PostSEMAlarmResponse> | Observable<PostSEMAlarmResponse> | PostSEMAlarmResponse;

  deleteSemAlarmLog(
    request: DeleteSEMAlarmRequest,
    metadata?: Metadata,
  ): Promise<DeleteSEMAlarmResponse> | Observable<DeleteSEMAlarmResponse> | DeleteSEMAlarmResponse;

  /** GeneralLog (not used) */

  getSemGeneralLog(
    request: SEMGeneralLogRequest,
    metadata?: Metadata,
  ): Promise<GetSEMGeneralLogResponse> | Observable<GetSEMGeneralLogResponse> | GetSEMGeneralLogResponse;

  deleteSemGeneralLog(
    request: DeleteSEMGeneralLogRequest,
    metadata?: Metadata,
  ): Promise<DeleteSEMGeneralLogResponse> | Observable<DeleteSEMGeneralLogResponse> | DeleteSEMGeneralLogResponse;

  postSemGeneralLog(
    request: PostSEMGeneralLogRequest,
    metadata?: Metadata,
  ): Promise<PostSEMGeneralLogResponse> | Observable<PostSEMGeneralLogResponse> | PostSEMGeneralLogResponse;
}

export function SEMLogGrpcServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getSemAlarmDefine",
      "postSemAlarmDefine",
      "deleteSemAlarmDefine",
      "deleteSemAlarmDefineAll",
      "getSemAlarmActive",
      "semAlarm",
      "deleteSemAlarm",
      "deleteSemAlarmAll",
      "getSemAlarmLog",
      "postSemAlarmLog",
      "deleteSemAlarmLog",
      "getSemGeneralLog",
      "deleteSemGeneralLog",
      "postSemGeneralLog",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SEMLogGrpcService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SEMLogGrpcService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SEM_LOG_GRPC_SERVICE_NAME = "SEMLogGrpcService";
