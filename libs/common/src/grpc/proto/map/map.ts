// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.4
//   protoc               v3.12.4
// source: map.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "map";

export interface Empty {
}

export interface Pose {
  x: number;
  y: number;
  z: number;
  rx: number;
  ry: number;
  rz: number;
}

export interface Node {
  id: string;
  name: string;
  pose: Pose | undefined;
  info: string;
  links: string[];
  type: string;
}

export interface FileInfo {
  fileName: string;
  createAt?: string | undefined;
  updateAt?: string | undefined;
  fileType?: string | undefined;
  fileSize?: number | undefined;
}

export interface MapInfo {
  fileName: string;
  createAt?: string | undefined;
  updateAt?: string | undefined;
  fileType?: string | undefined;
  cloudFiles: FileInfo[];
  topoFiles: FileInfo[];
}

export interface ReadMapListRequest {
  pageNo?: number | undefined;
  pageSize?: number | undefined;
  searchType?: string | undefined;
  searchText?: string | undefined;
  sortOption?: string | undefined;
  sortDirection?: string | undefined;
}

export interface ReadMapListResponse {
  list: MapInfo[];
  pageSize?: number | undefined;
  totalCount?: number | undefined;
  totalPage?: number | undefined;
}

export interface GetMapListResponse {
  list: MapInfo[];
}

export interface GetCurrentMapResponse {
  mapName: string;
}

/**
 * --Cloud
 * string[][]을 위한 편법
 */
export interface CloudPoint {
  row: string[];
}

export interface GetCloudRequest {
  mapName: string;
  fileName: string;
}

export interface GetCloudResponse {
  mapName: string;
  fileName: string;
  cloud: CloudPoint[];
}

export interface SaveCloudRequest {
  mapName: string;
  fileName: string;
  cloud: CloudPoint[];
}

export interface SaveCloudResponse {
  mapName: string;
  fileName: string;
  cloud: CloudPoint[];
}

/** --Topology */
export interface GetTopologyRequest {
  mapName: string;
  fileName: string;
  type?: string | undefined;
}

export interface GetTopologyResponse {
  mapName: string;
  fileName: string;
  type?: string | undefined;
  data: Node[];
}

export interface SaveTopologyRequest {
  mapName: string;
  fileName: string;
  data: Node[];
}

export interface SaveTopologyResponse {
  mapName: string;
  fileName: string;
  data: Node[];
}

export interface LoadRequest {
  command: string;
  mapName?: string | undefined;
}

export interface LoadResponse {
  command: string;
  mapName?: string | undefined;
  result: string;
  message?: string | undefined;
}

export interface MappingRequest {
  command: string;
  mapName?: string | undefined;
}

export interface MappingResponse {
  command: string;
  mapName?: string | undefined;
}

export interface UploadMapRequest {
  mapName: string;
  newMapName?: string | undefined;
}

export interface UploadMapResponse {
  mapName: string;
  newMapName: string;
}

export interface DownloadMapRequest {
  fileName: string;
  newMapName?: string | undefined;
  isForce: boolean;
}

export interface DownloadMapResponse {
  fileName: string;
  newMapName: string;
  isForce: boolean;
}

export interface PublishMapRequest {
  fileName: string;
  newMapName: string;
  isForce: boolean;
}

export interface PublishMapResponse {
  fileName: string;
  newMapName: string;
  isForce: boolean;
}

export interface GetMapTilesExistResponse {
  exist: boolean;
}

export interface GetMapTileRequest {
  mapName: string;
  z?: number | undefined;
  x?: number | undefined;
  y?: number | undefined;
}

export interface GetMapTileResponse {
  data: Uint8Array;
}

export const MAP_PACKAGE_NAME = "map";

export interface MapGrpcServiceClient {
  getMapList(request: ReadMapListRequest, metadata?: Metadata): Observable<ReadMapListResponse>;

  getCurrentMap(request: Empty, metadata?: Metadata): Observable<GetCurrentMapResponse>;

  getCloud(request: GetCloudRequest, metadata?: Metadata): Observable<GetCloudResponse>;

  saveCloud(request: SaveCloudRequest, metadata?: Metadata): Observable<SaveCloudResponse>;

  getTopology(request: GetTopologyRequest, metadata?: Metadata): Observable<GetTopologyResponse>;

  saveTopology(request: SaveTopologyRequest, metadata?: Metadata): Observable<SaveTopologyResponse>;

  load(request: LoadRequest, metadata?: Metadata): Observable<LoadResponse>;

  mapping(request: MappingRequest, metadata?: Metadata): Observable<MappingResponse>;

  uploadMap(request: UploadMapRequest, metadata?: Metadata): Observable<UploadMapResponse>;

  downloadMap(request: DownloadMapRequest, metadata?: Metadata): Observable<DownloadMapResponse>;

  publishMap(request: PublishMapRequest, metadata?: Metadata): Observable<PublishMapResponse>;

  getMapTileExist(request: GetMapTileRequest, metadata?: Metadata): Observable<GetMapTilesExistResponse>;

  getMapTile(request: GetMapTileRequest, metadata?: Metadata): Observable<GetMapTileResponse>;
}

export interface MapGrpcServiceController {
  getMapList(
    request: ReadMapListRequest,
    metadata?: Metadata,
  ): Promise<ReadMapListResponse> | Observable<ReadMapListResponse> | ReadMapListResponse;

  getCurrentMap(
    request: Empty,
    metadata?: Metadata,
  ): Promise<GetCurrentMapResponse> | Observable<GetCurrentMapResponse> | GetCurrentMapResponse;

  getCloud(
    request: GetCloudRequest,
    metadata?: Metadata,
  ): Promise<GetCloudResponse> | Observable<GetCloudResponse> | GetCloudResponse;

  saveCloud(
    request: SaveCloudRequest,
    metadata?: Metadata,
  ): Promise<SaveCloudResponse> | Observable<SaveCloudResponse> | SaveCloudResponse;

  getTopology(
    request: GetTopologyRequest,
    metadata?: Metadata,
  ): Promise<GetTopologyResponse> | Observable<GetTopologyResponse> | GetTopologyResponse;

  saveTopology(
    request: SaveTopologyRequest,
    metadata?: Metadata,
  ): Promise<SaveTopologyResponse> | Observable<SaveTopologyResponse> | SaveTopologyResponse;

  load(request: LoadRequest, metadata?: Metadata): Promise<LoadResponse> | Observable<LoadResponse> | LoadResponse;

  mapping(
    request: MappingRequest,
    metadata?: Metadata,
  ): Promise<MappingResponse> | Observable<MappingResponse> | MappingResponse;

  uploadMap(
    request: UploadMapRequest,
    metadata?: Metadata,
  ): Promise<UploadMapResponse> | Observable<UploadMapResponse> | UploadMapResponse;

  downloadMap(
    request: DownloadMapRequest,
    metadata?: Metadata,
  ): Promise<DownloadMapResponse> | Observable<DownloadMapResponse> | DownloadMapResponse;

  publishMap(
    request: PublishMapRequest,
    metadata?: Metadata,
  ): Promise<PublishMapResponse> | Observable<PublishMapResponse> | PublishMapResponse;

  getMapTileExist(
    request: GetMapTileRequest,
    metadata?: Metadata,
  ): Promise<GetMapTilesExistResponse> | Observable<GetMapTilesExistResponse> | GetMapTilesExistResponse;

  getMapTile(
    request: GetMapTileRequest,
    metadata?: Metadata,
  ): Promise<GetMapTileResponse> | Observable<GetMapTileResponse> | GetMapTileResponse;
}

export function MapGrpcServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getMapList",
      "getCurrentMap",
      "getCloud",
      "saveCloud",
      "getTopology",
      "saveTopology",
      "load",
      "mapping",
      "uploadMap",
      "downloadMap",
      "publishMap",
      "getMapTileExist",
      "getMapTile",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("MapGrpcService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("MapGrpcService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const MAP_GRPC_SERVICE_NAME = "MapGrpcService";
