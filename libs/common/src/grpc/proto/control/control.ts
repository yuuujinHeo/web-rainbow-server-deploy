// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.4
//   protoc               v3.12.4
// source: control.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "control";

export interface Empty {
}

export interface OnOffControlRequest {
  command: string;
  onoff: boolean;
  frequency?: number | undefined;
}

export interface OnOffControlResponse {
  command: string;
  onoff: boolean;
  frequency?: number | undefined;
  result?: string | undefined;
  message?: string | undefined;
}

export interface WorkControlRequest {
  command: string;
}

export interface WorkControlResponse {
  command: string;
  result?: string | undefined;
  message?: string | undefined;
}

export interface LEDControlRequest {
  command: string;
  onoff: boolean;
  color?: string | undefined;
}

export interface LEDControlResponse {
  command: string;
  onoff: boolean;
  color?: string | undefined;
  result?: string | undefined;
  message?: string | undefined;
}

export interface ExAccessoryControlRequest {
  command: string;
  pose?: string | undefined;
}

export interface ExAccessoryControlResponse {
  command: string;
  pose?: string | undefined;
  result?: string | undefined;
  message?: string | undefined;
}

export interface SafetyField {
  safetyField: string;
}

export interface McuDio {
  channel: number[];
}

export interface SafetyIoControlRequest {
  command: string;
  mcuDio: McuDio[];
}

export interface SafetyIoControlResponse {
  command: string;
  mcuDio: McuDio[];
  mcuDin: McuDio[];
  result: string;
  message?: string | undefined;
}

export interface SetObsBoxRequest {
  minZ?: number | undefined;
  maxZ?: number | undefined;
  mapRange?: number | undefined;
}

export interface SetObsBoxResponse {
  minZ?: number | undefined;
  maxZ?: number | undefined;
  mapRange?: number | undefined;
  result: string;
  message?: string | undefined;
}

export interface GetObsBoxResponse {
  minZ?: number | undefined;
  maxZ?: number | undefined;
  mapRange?: number | undefined;
  result: string;
  message?: string | undefined;
}

export const CONTROL_PACKAGE_NAME = "control";

/** led, */

export interface ControlGrpcServiceClient {
  onOffControl(request: OnOffControlRequest, metadata?: Metadata): Observable<OnOffControlResponse>;

  workControl(request: WorkControlRequest, metadata?: Metadata): Observable<WorkControlResponse>;

  ledControl(request: LEDControlRequest, metadata?: Metadata): Observable<LEDControlResponse>;

  setSafetyField(request: SafetyField, metadata?: Metadata): Observable<SafetyField>;

  getSafetyField(request: Empty, metadata?: Metadata): Observable<SafetyField>;

  exAccessoryControl(request: ExAccessoryControlRequest, metadata?: Metadata): Observable<ExAccessoryControlResponse>;

  safetyIoControl(request: SafetyIoControlRequest, metadata?: Metadata): Observable<SafetyIoControlResponse>;

  setObsBox(request: SetObsBoxRequest, metadata?: Metadata): Observable<SetObsBoxResponse>;

  getObsBox(request: Empty, metadata?: Metadata): Observable<GetObsBoxResponse>;
}

/** led, */

export interface ControlGrpcServiceController {
  onOffControl(
    request: OnOffControlRequest,
    metadata?: Metadata,
  ): Promise<OnOffControlResponse> | Observable<OnOffControlResponse> | OnOffControlResponse;

  workControl(
    request: WorkControlRequest,
    metadata?: Metadata,
  ): Promise<WorkControlResponse> | Observable<WorkControlResponse> | WorkControlResponse;

  ledControl(
    request: LEDControlRequest,
    metadata?: Metadata,
  ): Promise<LEDControlResponse> | Observable<LEDControlResponse> | LEDControlResponse;

  setSafetyField(
    request: SafetyField,
    metadata?: Metadata,
  ): Promise<SafetyField> | Observable<SafetyField> | SafetyField;

  getSafetyField(request: Empty, metadata?: Metadata): Promise<SafetyField> | Observable<SafetyField> | SafetyField;

  exAccessoryControl(
    request: ExAccessoryControlRequest,
    metadata?: Metadata,
  ): Promise<ExAccessoryControlResponse> | Observable<ExAccessoryControlResponse> | ExAccessoryControlResponse;

  safetyIoControl(
    request: SafetyIoControlRequest,
    metadata?: Metadata,
  ): Promise<SafetyIoControlResponse> | Observable<SafetyIoControlResponse> | SafetyIoControlResponse;

  setObsBox(
    request: SetObsBoxRequest,
    metadata?: Metadata,
  ): Promise<SetObsBoxResponse> | Observable<SetObsBoxResponse> | SetObsBoxResponse;

  getObsBox(
    request: Empty,
    metadata?: Metadata,
  ): Promise<GetObsBoxResponse> | Observable<GetObsBoxResponse> | GetObsBoxResponse;
}

export function ControlGrpcServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "onOffControl",
      "workControl",
      "ledControl",
      "setSafetyField",
      "getSafetyField",
      "exAccessoryControl",
      "safetyIoControl",
      "setObsBox",
      "getObsBox",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ControlGrpcService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ControlGrpcService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CONTROL_GRPC_SERVICE_NAME = "ControlGrpcService";
