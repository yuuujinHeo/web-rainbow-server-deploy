// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.4
//   protoc               v3.12.4
// source: cobot.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "cobot";

export interface CobotCommandRequest {
  cobotPort: string;
  command: string;
}

export interface CobotCommandResponse {
  cobotPort: string;
  command: string;
}

export const COBOT_PACKAGE_NAME = "cobot";

export interface CobotGrpcServiceClient {
  cobotCommand(request: CobotCommandRequest, metadata?: Metadata): Observable<CobotCommandResponse>;
}

export interface CobotGrpcServiceController {
  cobotCommand(
    request: CobotCommandRequest,
    metadata?: Metadata,
  ): Promise<CobotCommandResponse> | Observable<CobotCommandResponse> | CobotCommandResponse;
}

export function CobotGrpcServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["cobotCommand"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CobotGrpcService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CobotGrpcService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const COBOT_GRPC_SERVICE_NAME = "CobotGrpcService";
