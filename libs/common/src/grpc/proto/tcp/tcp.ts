// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.4
//   protoc               v3.12.4
// source: tcp.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "tcp";

export interface Empty {
}

export interface ServerInfo {
  /** 서버 생성된 시기 */
  createAt: string;
  /** 서버 포트 */
  port: number;
  /** 연결된 클라이언트 수 */
  clients: number;
}

export interface GetServerStateResponse {
  servers: ServerInfo[];
}

export interface OpenServerRequest {
  port: number;
}

export interface OpenServerResponse {
  port: number;
  createAt: string;
}

export interface CloseServerRequest {
  port: number;
}

export interface CloseServerResponse {
  port: number;
  clients: number;
}

export const TCP_PACKAGE_NAME = "tcp";

export interface TcpGrpcServiceClient {
  /** 연결 */

  getServerState(request: Empty, metadata?: Metadata): Observable<GetServerStateResponse>;

  openServer(request: OpenServerRequest, metadata?: Metadata): Observable<OpenServerResponse>;

  closeServer(request: CloseServerRequest, metadata?: Metadata): Observable<CloseServerResponse>;
}

export interface TcpGrpcServiceController {
  /** 연결 */

  getServerState(
    request: Empty,
    metadata?: Metadata,
  ): Promise<GetServerStateResponse> | Observable<GetServerStateResponse> | GetServerStateResponse;

  openServer(
    request: OpenServerRequest,
    metadata?: Metadata,
  ): Promise<OpenServerResponse> | Observable<OpenServerResponse> | OpenServerResponse;

  closeServer(
    request: CloseServerRequest,
    metadata?: Metadata,
  ): Promise<CloseServerResponse> | Observable<CloseServerResponse> | CloseServerResponse;
}

export function TcpGrpcServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getServerState", "openServer", "closeServer"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TcpGrpcService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TcpGrpcService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TCP_GRPC_SERVICE_NAME = "TcpGrpcService";
