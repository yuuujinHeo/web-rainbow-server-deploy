// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.4
//   protoc               v3.12.4
// source: redis.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "redis";

export enum RobotType {
  UNKNOWN = 0,
  MOBILE = 1,
  MANIPULATOR = 2,
  SENSOR = 3,
  UNRECOGNIZED = -1,
}

export enum SocketType {
  CLIENT = 0,
  AMR = 1,
  UNRECOGNIZED = -1,
}

export interface ExistsRobotCacheRequest {
  robotSerial: string;
  robotType: RobotType;
}

export interface ExistsRobotCacheResponse {
  exists: boolean;
}

export interface CreateRobotCacheRequest {
  robotSerial: string;
  robotType: RobotType;
  robotName?: string | undefined;
  robotIpAddress?: string | undefined;
  robotUri?: string | undefined;
  robotApproveYn: string;
}

export interface CreateRobotCacheResponse {
  robotSerial: string;
  robotType: RobotType;
  robotName: string;
  robotIpAddress: string;
  robotUri: string;
  robotApproveYn: string;
}

export interface UpdateRobotCacheRequest {
  robotSerial: string;
  robotType: RobotType;
  data?: UpdateRobotCacheRequest_Robot | undefined;
}

export interface UpdateRobotCacheRequest_Robot {
  robotSerial?: string | undefined;
  robotType?: RobotType | undefined;
  robotName?: string | undefined;
  robotIpAddress?: string | undefined;
  robotUri?: string | undefined;
  robotApproveYn?: string | undefined;
}

export interface UpdateRobotCacheResponse {
  robotSerial: string;
  robotType: RobotType;
  robotName: string;
  robotIpAddress: string;
  robotUri: string;
  robotApproveYn: string;
}

export interface ReadRobotCacheRequest {
  robotSerial: string;
  robotType?: RobotType | undefined;
}

export interface ReadRobotCacheResponse {
  robotSerial: string;
  robotType: RobotType;
  robotName: string;
  robotIpAddress: string;
  robotUri: string;
  robotApproveYn: string;
}

export interface ReadRobotCacheListRequest {
  pageNo?: number | undefined;
  pageSize?: number | undefined;
  searchType?: string | undefined;
  searchText?: string | undefined;
  robotSerial?: string | undefined;
  robotType?: RobotType | undefined;
  robotName?: string | undefined;
  robotIpAddress?: string | undefined;
  robotUri?: string | undefined;
  robotApproveYn?: string | undefined;
}

export interface ReadRobotCacheListResponse {
  pageNo: number;
  pageSize: number;
  totalCount: number;
  totalPage: number;
  data: ReadRobotCacheListResponse_Robot[];
}

export interface ReadRobotCacheListResponse_Robot {
  robotSerial: string;
  robotType: RobotType;
  robotName: string;
  robotIpAddress: string;
  robotUri: string;
  robotApproveYn: string;
}

export interface DeleteRobotCacheRequest {
  robotSerial: string;
  robotType: RobotType;
}

export interface DeleteRobotCacheResponse {
  robotSerial: string;
  robotType: RobotType;
  robotName: string;
  robotIpAddress: string;
  robotUri: string;
  robotApproveYn: string;
}

export interface CreateSocketCacheRequest {
  socketKey: string;
  socketType: SocketType;
  socketValue?: string | undefined;
}

export interface CreateSocketCacheResponse {
  socketKey: string;
  socketType: SocketType;
  socketValue: string;
}

export interface UpdateSocketCacheRequest {
  socketKey: string;
  socketType: SocketType;
  data?: UpdateSocketCacheRequest_Socket | undefined;
}

export interface UpdateSocketCacheRequest_Socket {
  socketValue?: string | undefined;
}

export interface UpdateSocketCacheResponse {
  socketKey: string;
  socketType: SocketType;
  socketValue: string;
}

export interface ReadSocketCacheRequest {
  socketKey: string;
  socketType: SocketType;
}

export interface ReadSocketCacheResponse {
  socketKey: string;
  socketType: SocketType;
  socketValue: string;
}

export interface ReadSocketCacheListRequest {
  pageNo?: number | undefined;
  pageSize?: number | undefined;
  searchType?: string | undefined;
  searchText?: string | undefined;
  socketKey?: string | undefined;
  socketType?: SocketType | undefined;
}

export interface ReadSocketCacheListResponse {
  pageNo: number;
  pageSize: number;
  totalCount: number;
  totalPage: number;
  data: ReadSocketCacheListResponse_Socket[];
}

export interface ReadSocketCacheListResponse_Socket {
  socketKey?: string | undefined;
  socketType?: SocketType | undefined;
  socketValue?: string | undefined;
}

export interface DeleteSocketCacheRequest {
  socketKey: string;
  socketType: SocketType;
}

export interface DeleteSocketCacheResponse {
  socketKey: string;
  socketType: SocketType;
  socketValue: string;
}

export const REDIS_PACKAGE_NAME = "redis";

export interface RedisSocketCacheGrpcServiceClient {
  readSocketCache(request: ReadSocketCacheRequest, metadata?: Metadata): Observable<ReadSocketCacheResponse>;

  readSocketCacheList(
    request: ReadSocketCacheListRequest,
    metadata?: Metadata,
  ): Observable<ReadSocketCacheListResponse>;

  createSocketCache(request: CreateSocketCacheRequest, metadata?: Metadata): Observable<CreateSocketCacheResponse>;

  updateSocketCache(request: UpdateSocketCacheRequest, metadata?: Metadata): Observable<UpdateSocketCacheResponse>;

  deleteSocketCache(request: DeleteSocketCacheRequest, metadata?: Metadata): Observable<DeleteSocketCacheResponse>;
}

export interface RedisSocketCacheGrpcServiceController {
  readSocketCache(
    request: ReadSocketCacheRequest,
    metadata?: Metadata,
  ): Promise<ReadSocketCacheResponse> | Observable<ReadSocketCacheResponse> | ReadSocketCacheResponse;

  readSocketCacheList(
    request: ReadSocketCacheListRequest,
    metadata?: Metadata,
  ): Promise<ReadSocketCacheListResponse> | Observable<ReadSocketCacheListResponse> | ReadSocketCacheListResponse;

  createSocketCache(
    request: CreateSocketCacheRequest,
    metadata?: Metadata,
  ): Promise<CreateSocketCacheResponse> | Observable<CreateSocketCacheResponse> | CreateSocketCacheResponse;

  updateSocketCache(
    request: UpdateSocketCacheRequest,
    metadata?: Metadata,
  ): Promise<UpdateSocketCacheResponse> | Observable<UpdateSocketCacheResponse> | UpdateSocketCacheResponse;

  deleteSocketCache(
    request: DeleteSocketCacheRequest,
    metadata?: Metadata,
  ): Promise<DeleteSocketCacheResponse> | Observable<DeleteSocketCacheResponse> | DeleteSocketCacheResponse;
}

export function RedisSocketCacheGrpcServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "readSocketCache",
      "readSocketCacheList",
      "createSocketCache",
      "updateSocketCache",
      "deleteSocketCache",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RedisSocketCacheGrpcService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RedisSocketCacheGrpcService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const REDIS_SOCKET_CACHE_GRPC_SERVICE_NAME = "RedisSocketCacheGrpcService";

export interface RedisRobotCacheGrpcServiceClient {
  readRobotCache(request: ReadRobotCacheRequest, metadata?: Metadata): Observable<ReadRobotCacheResponse>;

  existsRobotCache(request: ExistsRobotCacheRequest, metadata?: Metadata): Observable<ExistsRobotCacheResponse>;

  readRobotCacheList(request: ReadRobotCacheListRequest, metadata?: Metadata): Observable<ReadRobotCacheListResponse>;

  createRobotCache(request: CreateRobotCacheRequest, metadata?: Metadata): Observable<CreateRobotCacheResponse>;

  updateRobotCache(request: UpdateRobotCacheRequest, metadata?: Metadata): Observable<UpdateRobotCacheResponse>;

  deleteRobotCache(request: DeleteRobotCacheRequest, metadata?: Metadata): Observable<DeleteRobotCacheResponse>;
}

export interface RedisRobotCacheGrpcServiceController {
  readRobotCache(
    request: ReadRobotCacheRequest,
    metadata?: Metadata,
  ): Promise<ReadRobotCacheResponse> | Observable<ReadRobotCacheResponse> | ReadRobotCacheResponse;

  existsRobotCache(
    request: ExistsRobotCacheRequest,
    metadata?: Metadata,
  ): Promise<ExistsRobotCacheResponse> | Observable<ExistsRobotCacheResponse> | ExistsRobotCacheResponse;

  readRobotCacheList(
    request: ReadRobotCacheListRequest,
    metadata?: Metadata,
  ): Promise<ReadRobotCacheListResponse> | Observable<ReadRobotCacheListResponse> | ReadRobotCacheListResponse;

  createRobotCache(
    request: CreateRobotCacheRequest,
    metadata?: Metadata,
  ): Promise<CreateRobotCacheResponse> | Observable<CreateRobotCacheResponse> | CreateRobotCacheResponse;

  updateRobotCache(
    request: UpdateRobotCacheRequest,
    metadata?: Metadata,
  ): Promise<UpdateRobotCacheResponse> | Observable<UpdateRobotCacheResponse> | UpdateRobotCacheResponse;

  deleteRobotCache(
    request: DeleteRobotCacheRequest,
    metadata?: Metadata,
  ): Promise<DeleteRobotCacheResponse> | Observable<DeleteRobotCacheResponse> | DeleteRobotCacheResponse;
}

export function RedisRobotCacheGrpcServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "readRobotCache",
      "existsRobotCache",
      "readRobotCacheList",
      "createRobotCache",
      "updateRobotCache",
      "deleteRobotCache",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RedisRobotCacheGrpcService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RedisRobotCacheGrpcService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const REDIS_ROBOT_CACHE_GRPC_SERVICE_NAME = "RedisRobotCacheGrpcService";
