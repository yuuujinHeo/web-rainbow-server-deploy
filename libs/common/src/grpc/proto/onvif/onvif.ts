// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: proto/onvif.proto

/* eslint-disable */
import { Metadata } from '@grpc/grpc-js';
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'onvif';

export interface ServiceRequest {
  data: string;
}

export interface ServiceResponse {
  data: string;
}

export const ONVIF_PACKAGE_NAME = 'onvif';

export interface OnvifServiceClient {
  deviceService(request: ServiceRequest, metadata?: Metadata): Observable<ServiceResponse>;

  mediaService(request: ServiceRequest, metadata?: Metadata): Observable<ServiceResponse>;

  snapshot(request: ServiceRequest, metadata?: Metadata): Observable<ServiceResponse>;

  ptzService(request: ServiceRequest, metadata?: Metadata): Observable<ServiceResponse>;

  deviceIoService(request: ServiceRequest, metadata?: Metadata): Observable<ServiceResponse>;

  eventService(request: ServiceRequest, metadata?: Metadata): Observable<ServiceResponse>;
}

export interface OnvifServiceController {
  deviceService(request: ServiceRequest, metadata?: Metadata): Promise<ServiceResponse> | Observable<ServiceResponse> | ServiceResponse;

  mediaService(request: ServiceRequest, metadata?: Metadata): Promise<ServiceResponse> | Observable<ServiceResponse> | ServiceResponse;

  snapshot(request: ServiceRequest, metadata?: Metadata): Promise<ServiceResponse> | Observable<ServiceResponse> | ServiceResponse;

  ptzService(request: ServiceRequest, metadata?: Metadata): Promise<ServiceResponse> | Observable<ServiceResponse> | ServiceResponse;

  deviceIoService(request: ServiceRequest, metadata?: Metadata): Promise<ServiceResponse> | Observable<ServiceResponse> | ServiceResponse;

  eventService(request: ServiceRequest, metadata?: Metadata): Promise<ServiceResponse> | Observable<ServiceResponse> | ServiceResponse;
}

export function OnvifServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['deviceService', 'mediaService', 'snapshot', 'ptzService', 'deviceIoService', 'eventService'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod('OnvifService', method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod('OnvifService', method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ONVIF_SERVICE_NAME = 'OnvifService';
