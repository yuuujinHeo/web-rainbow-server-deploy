"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NewParser = void 0;
const parserv2_1 = require("parserv2");
const parserv3_1 = require("parserv3");
const avro_schema_parser_1 = require("@asyncapi/avro-schema-parser");
const openapi_schema_parser_1 = require("@asyncapi/openapi-schema-parser");
const raml_dt_schema_parser_1 = require("@asyncapi/raml-dt-schema-parser");
const protobuf_schema_parser_1 = require("@asyncapi/protobuf-schema-parser");
function NewParser(parserAPIMajorVersion, options) {
    const parserOptions = (options === null || options === void 0 ? void 0 : options.parserOptions) || {};
    // This is done globally instead of per version because latest versions of those schema parsers are still compatible with newer versions of the Parser-JS.
    // If a breaking change is introduced in the future, then we would need to register the schema parsers compatible with each version of the Parser-JS.
    if (options === null || options === void 0 ? void 0 : options.includeSchemaParsers) {
        const defaultSchemaParsers = [
            (0, avro_schema_parser_1.AvroSchemaParser)(),
            (0, openapi_schema_parser_1.OpenAPISchemaParser)(),
            (0, raml_dt_schema_parser_1.RamlDTSchemaParser)(),
            (0, protobuf_schema_parser_1.ProtoBuffSchemaParser)(),
        ];
        if (!parserOptions.schemaParsers) {
            parserOptions.schemaParsers = defaultSchemaParsers;
        }
        else {
            // If the user provides a schema parser, use that one instead of the default one. Comparison is done with the mime types.
            const givenSchemaParsersMimeTypes = parserOptions.schemaParsers.map((schemaParser) => schemaParser.getMimeTypes()).flat();
            const filteredDefaultSchemas = defaultSchemaParsers.filter((defaultSchemaParser) => !givenSchemaParsersMimeTypes.includes(defaultSchemaParser.getMimeTypes()[0]));
            parserOptions.schemaParsers.push(...filteredDefaultSchemas);
        }
    }
    switch (parserAPIMajorVersion) {
        case 1:
            return new parserv2_1.Parser(parserOptions);
        default: // default to latest version
        case 2:
            return new parserv3_1.Parser(parserOptions);
    }
}
exports.NewParser = NewParser;
