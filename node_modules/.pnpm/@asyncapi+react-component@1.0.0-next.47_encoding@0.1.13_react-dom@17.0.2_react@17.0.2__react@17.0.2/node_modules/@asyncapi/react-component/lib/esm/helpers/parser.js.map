{"version":3,"file":"parser.js","sourceRoot":"","sources":["../../../src/helpers/parser.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,oBAAoB,EAAE,MAAM,kBAAkB,CAAC;AAE7E,OAAO,mBAAmB,MAAM,iCAAiC,CAAC;AAElE,OAAO,gBAAgB,MAAM,8BAA8B,CAAC;AAI5D,OAAO,EAAE,sBAAsB,EAAE,MAAM,cAAc,CAAC;AAEtD,oBAAoB,CAAC,mBAAmB,CAAC,CAAC;AAC1C,oBAAoB,CAAC,gBAAgB,CAAC,CAAC;AAEvC;IAAA;IAqCA,CAAC;IApCc,YAAK,GAAlB,UACE,OAAqB,EACrB,aAAmB;;;;;;;wBAGA,WAAM,KAAK,CAAC,OAAO,EAAE,aAAa,CAAC,EAAA;;wBAA9C,QAAQ,GAAG,SAAmC;wBACpD,WAAO,EAAE,QAAQ,UAAA,EAAE,EAAC;;;wBAEpB,WAAO,IAAI,CAAC,WAAW,CAAC,KAAkB,CAAC,EAAC;;;;;KAE/C;IAEY,mBAAY,GAAzB,UACE,GAA4B,EAC5B,aAAmB;;;;;;;wBAGA,WAAM,YAAY,CACjC,GAAG,CAAC,GAAG,EACP,GAAG,CAAC,cAAc,EAClB,aAAa,CACd,EAAA;;wBAJK,QAAQ,GAAG,SAIhB;wBACD,WAAO,EAAE,QAAQ,UAAA,EAAE,EAAC;;;wBAEpB,WAAO,IAAI,CAAC,WAAW,CAAC,KAAkB,CAAC,EAAC;;;;;KAE/C;IAEc,kBAAW,GAAG,UAAC,GAAgB;QAC5C,IAAI,GAAG,CAAC,IAAI,KAAK,sBAAsB,EAAE;YACvC,OAAO;gBACL,KAAK,EAAE,GAAG;aACX,CAAC;SACH;QACD,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;IACxB,CAAC,CAAC;IACJ,aAAC;CAAA,AArCD,IAqCC;SArCY,MAAM","sourcesContent":["import { parse, parseFromUrl, registerSchemaParser } from '@asyncapi/parser';\n// @ts-ignore\nimport openapiSchemaParser from '@asyncapi/openapi-schema-parser';\n// @ts-ignore\nimport avroSchemaParser from '@asyncapi/avro-schema-parser';\n\nimport { ErrorObject, ParserReturn, FetchingSchemaInterface } from '../types';\n\nimport { VALIDATION_ERRORS_TYPE } from '../constants';\n\nregisterSchemaParser(openapiSchemaParser);\nregisterSchemaParser(avroSchemaParser);\n\nexport class Parser {\n  static async parse(\n    content: string | any,\n    parserOptions?: any,\n  ): Promise<ParserReturn> {\n    try {\n      const asyncapi = await parse(content, parserOptions);\n      return { asyncapi };\n    } catch (err) {\n      return this.handleError(err as ErrorObject);\n    }\n  }\n\n  static async parseFromUrl(\n    arg: FetchingSchemaInterface,\n    parserOptions?: any,\n  ): Promise<ParserReturn> {\n    try {\n      const asyncapi = await parseFromUrl(\n        arg.url,\n        arg.requestOptions,\n        parserOptions,\n      );\n      return { asyncapi };\n    } catch (err) {\n      return this.handleError(err as ErrorObject);\n    }\n  }\n\n  private static handleError = (err: ErrorObject): ParserReturn => {\n    if (err.type === VALIDATION_ERRORS_TYPE) {\n      return {\n        error: err,\n      };\n    }\n    return { error: err };\n  };\n}\n"]}