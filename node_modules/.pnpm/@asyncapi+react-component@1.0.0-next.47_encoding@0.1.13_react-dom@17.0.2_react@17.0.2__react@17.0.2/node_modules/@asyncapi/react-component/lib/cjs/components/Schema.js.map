{"version":3,"file":"Schema.js","sourceRoot":"","sources":["../../../src/components/Schema.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { Schema as SchemaType } from '@asyncapi/parser';\n\nimport { Href, CollapseButton, Markdown, Extensions } from './index';\nimport { SchemaHelpers } from '../helpers';\n\ninterface Props {\n  schemaName?: React.ReactNode;\n  schema?: SchemaType;\n  required?: boolean;\n  isPatternProperty?: boolean;\n  isProperty?: boolean;\n  isCircular?: boolean;\n  dependentRequired?: string[];\n  expanded?: boolean;\n  onlyTitle?: boolean;\n}\n\nconst SchemaContext = React.createContext({\n  reverse: false,\n  deepExpanded: false,\n});\n\nexport const Schema: React.FunctionComponent<Props> = ({\n  schemaName,\n  schema,\n  required = false,\n  isPatternProperty = false,\n  isProperty = false,\n  isCircular = false,\n  dependentRequired,\n  expanded: propExpanded = false,\n  onlyTitle = false,\n}) => {\n  const { reverse, deepExpanded } = useContext(SchemaContext);\n  const [expanded, setExpanded] = useState(propExpanded);\n  const [deepExpand, setDeepExpand] = useState(false);\n\n  useEffect(() => {\n    setDeepExpand(deepExpanded);\n  }, [deepExpanded, setDeepExpand]);\n\n  useEffect(() => {\n    setExpanded(deepExpand);\n  }, [deepExpand, setExpanded]);\n\n  if (\n    !schema ||\n    (typeof schemaName === 'string' &&\n      (schemaName?.startsWith('x-parser-') ||\n        schemaName?.startsWith('x-schema-private-')))\n  ) {\n    return null;\n  }\n\n  const dependentSchemas = SchemaHelpers.getDependentSchemas(schema);\n\n  const constraints = SchemaHelpers.humanizeConstraints(schema);\n  const externalDocs = schema.externalDocs();\n\n  const renderType = schema.ext(SchemaHelpers.extRenderType) !== false;\n  const rawValue = schema.ext(SchemaHelpers.extRawValue) === true;\n  const parameterLocation = schema.ext(SchemaHelpers.extParameterLocation);\n  const isExpandable = SchemaHelpers.isExpandable(schema) || dependentSchemas;\n\n  let schemaType = SchemaHelpers.toSchemaType(schema);\n  isCircular =\n    isCircular ||\n    schema.isCircular() ||\n    schema.ext('x-parser-circular') ||\n    false;\n  const uid = schema.uid();\n\n  const schemaItems = schema.items();\n  if (schemaItems && !Array.isArray(schemaItems)) {\n    /**\n     * fallback for older logic for circular references:\n     *\n     * checking uid for circular items\n     * `x-parser-circular` extension is added to every schema which has circular `items` field,\n     * so we must check that `items` is schema (not array of schemas) and infer UID of schema to display which schema is circular (by the name of schema)\n     */\n    isCircular =\n      isCircular ||\n      schemaItems.isCircular() ||\n      schemaItems.ext('x-parser-circular') ||\n      false;\n    if (\n      isCircular &&\n      typeof (schemaItems as any).circularSchema === 'function'\n    ) {\n      schemaType = SchemaHelpers.toSchemaType(\n        (schemaItems as any).circularSchema(),\n      );\n    }\n  } else if (\n    isCircular &&\n    typeof (schema as any).circularSchema === 'function'\n  ) {\n    schemaType = SchemaHelpers.toSchemaType((schema as any).circularSchema());\n  }\n\n  const styledSchemaName = isProperty ? 'italic' : '';\n  const renderedSchemaName =\n    typeof schemaName === 'string' ? (\n      <span className={`break-words text-sm ${styledSchemaName}`}>\n        {schemaName}\n      </span>\n    ) : (\n      schemaName\n    );\n\n  return (\n    <SchemaContext.Provider\n      value={{ reverse: !reverse, deepExpanded: deepExpand }}\n    >\n      <div>\n        <div className=\"flex py-2\">\n          <div className={`${onlyTitle ? '' : 'min-w-1/4'} mr-2`}>\n            {isExpandable && !isCircular ? (\n              <>\n                <CollapseButton\n                  onClick={() => setExpanded(prev => !prev)}\n                  expanded={expanded}\n                >\n                  {renderedSchemaName}\n                </CollapseButton>\n                <button\n                  type=\"button\"\n                  onClick={() => setDeepExpand(prev => !prev)}\n                  className=\"ml-1 text-sm text-gray-500\"\n                >\n                  {deepExpand ? 'Collapse all' : 'Expand all'}\n                </button>\n              </>\n            ) : (\n              <span\n                className={`break-words text-sm ${isProperty ? 'italic' : ''}`}\n              >\n                {schemaName}\n              </span>\n            )}\n            {isPatternProperty && (\n              <div className=\"text-gray-500 text-xs italic\">\n                (pattern property)\n              </div>\n            )}\n            {required && <div className=\"text-red-600 text-xs\">required</div>}\n            {dependentRequired && (\n              <>\n                <div className=\"text-gray-500 text-xs\">\n                  required when defined:\n                </div>\n                <div className=\"text-red-600 text-xs\">\n                  {dependentRequired.join(', ')}\n                </div>\n              </>\n            )}\n            {schema.deprecated() && (\n              <div className=\"text-red-600 text-xs\">deprecated</div>\n            )}\n            {schema.writeOnly() && (\n              <div className=\"text-gray-500 text-xs\">write-only</div>\n            )}\n            {schema.readOnly() && (\n              <div className=\"text-gray-500 text-xs\">read-only</div>\n            )}\n          </div>\n          {rawValue ? (\n            <div>\n              <div className=\"text-sm\">\n                {SchemaHelpers.prettifyValue(schema.const(), false)}\n              </div>\n            </div>\n          ) : (\n            <div>\n              <div>\n                {renderType && (\n                  <div className=\"capitalize text-sm text-teal-500 font-bold inline-block mr-2\">\n                    {isCircular ? `${schemaType} [CIRCULAR]` : schemaType}\n                  </div>\n                )}\n                <div className=\"inline-block\">\n                  {schema.format() && (\n                    <span className=\"bg-yellow-600 font-bold no-underline text-white rounded lowercase mr-2 p-1 text-xs\">\n                      format: {schema.format()}\n                    </span>\n                  )}\n\n                  {/* related to string */}\n                  {schema.pattern() !== undefined && (\n                    <span className=\"bg-yellow-600 font-bold no-underline text-white rounded mr-2 p-1 text-xs\">\n                      must match: {schema.pattern()}\n                    </span>\n                  )}\n                  {schema.contentMediaType() !== undefined && (\n                    <span className=\"bg-yellow-600 font-bold no-underline text-white rounded lowercase mr-2 p-1 text-xs\">\n                      media type: {schema.contentMediaType()}\n                    </span>\n                  )}\n                  {schema.contentEncoding() !== undefined && (\n                    <span className=\"bg-yellow-600 font-bold no-underline text-white rounded lowercase mr-2 p-1 text-xs\">\n                      encoding: {schema.contentEncoding()}\n                    </span>\n                  )}\n\n                  {/* constraints */}\n                  {!!constraints.length &&\n                    constraints.map(c => (\n                      <span\n                        className=\"bg-purple-600 font-bold no-underline text-white rounded lowercase mr-2 p-1 text-xs\"\n                        key={c}\n                      >\n                        {c}\n                      </span>\n                    ))}\n\n                  {uid && !uid.startsWith('<anonymous-') && (\n                    <span className=\"border text-orange-600 rounded mr-2 p-1 text-xs\">\n                      uid: {uid}\n                    </span>\n                  )}\n                </div>\n\n                {schema.hasDescription() && (\n                  <div>\n                    <Markdown>{schema.description()}</Markdown>\n                  </div>\n                )}\n\n                {schema.default() !== undefined && (\n                  <div className=\"text-xs\">\n                    Default value:\n                    <span className=\"border inline-block text-orange-600 rounded ml-1 py-0 px-2\">\n                      {SchemaHelpers.prettifyValue(schema.default())}\n                    </span>\n                  </div>\n                )}\n                {schema.const() !== undefined && (\n                  <div className=\"text-xs\">\n                    Const:\n                    <span className=\"border inline-block text-orange-600 rounded ml-1 py-0 px-2\">\n                      {SchemaHelpers.prettifyValue(schema.const())}\n                    </span>\n                  </div>\n                )}\n                {schema.enum() && (\n                  <ul className=\"text-xs\">\n                    Allowed values:{' '}\n                    {schema.enum().map((e, idx) => (\n                      <li\n                        key={idx}\n                        className=\"border inline-block text-orange-600 rounded ml-1 py-0 px-2\"\n                      >\n                        <span>{SchemaHelpers.prettifyValue(e)}</span>\n                      </li>\n                    ))}\n                  </ul>\n                )}\n                {parameterLocation && (\n                  <div className=\"text-xs\">\n                    Parameter location:{' '}\n                    <span className=\"border text-orange-600 rounded mr-2 p-1 text-xs\">\n                      {parameterLocation}\n                    </span>\n                  </div>\n                )}\n                {externalDocs && (\n                  <span className=\"border border-solid border-orange-300 hover:bg-orange-300 hover:text-orange-600 text-orange-500 font-bold no-underline text-xs uppercase rounded px-2 py-0\">\n                    <Href\n                      href={externalDocs.url()}\n                      title={externalDocs.description() || ''}\n                    >\n                      Documentation\n                    </Href>\n                  </span>\n                )}\n                {schema.examples() && (\n                  <ul className=\"text-xs\">\n                    Examples values:{' '}\n                    {schema.examples().map((e, idx) => (\n                      <li\n                        key={idx}\n                        className=\"border inline-block text-orange-600 rounded ml-1 py-0 px-2 break-all\"\n                      >\n                        <span>{SchemaHelpers.prettifyValue(e)}</span>\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {isCircular || !isExpandable ? null : (\n          <div\n            className={`rounded p-4 py-2 border bg-gray-100 ${\n              reverse ? 'bg-gray-200' : ''\n            } ${expanded ? 'block' : 'hidden'}`}\n          >\n            <SchemaProperties schema={schema} />\n            <SchemaItems schema={schema} />\n\n            {schema.oneOf() &&\n              schema\n                .oneOf()\n                .map((s, idx) => (\n                  <Schema\n                    key={idx}\n                    schema={s}\n                    schemaName={idx === 0 ? 'Adheres to:' : 'Or to:'}\n                  />\n                ))}\n            {schema.anyOf() &&\n              schema\n                .anyOf()\n                .map((s, idx) => (\n                  <Schema\n                    key={idx}\n                    schema={s}\n                    schemaName={idx === 0 ? 'Can adhere to:' : 'Or to:'}\n                  />\n                ))}\n            {schema.allOf() &&\n              schema\n                .allOf()\n                .map((s, idx) => (\n                  <Schema\n                    key={idx}\n                    schema={s}\n                    schemaName={idx === 0 ? 'Consists of:' : 'And with:'}\n                  />\n                ))}\n            {schema.not() && (\n              <Schema schema={schema.not()} schemaName=\"Cannot adhere to:\" />\n            )}\n\n            {schema.propertyNames() && (\n              <Schema\n                schema={schema.propertyNames()}\n                schemaName=\"Property names must adhere to:\"\n              />\n            )}\n            {schema.contains() && (\n              <Schema\n                schema={schema.contains()}\n                schemaName=\"Array must contain at least one of:\"\n              />\n            )}\n\n            {schema.if() && (\n              <Schema schema={schema.if()} schemaName=\"If schema adheres to:\" />\n            )}\n            {schema.then() && (\n              <Schema\n                schema={schema.then()}\n                schemaName=\"Then must adhere to:\"\n              />\n            )}\n            {schema.else() && (\n              <Schema schema={schema.else()} schemaName=\"Otherwise:\" />\n            )}\n\n            {dependentSchemas && (\n              <Schema\n                schema={dependentSchemas}\n                schemaName=\"Dependent schemas:\"\n              />\n            )}\n\n            <Extensions item={schema} />\n\n            <AdditionalProperties schema={schema} />\n            <AdditionalItems schema={schema} />\n          </div>\n        )}\n      </div>\n    </SchemaContext.Provider>\n  );\n};\n\ninterface SchemaPropertiesProps {\n  schema: SchemaType;\n}\n\nconst SchemaProperties: React.FunctionComponent<SchemaPropertiesProps> = ({\n  schema,\n}) => {\n  const properties = schema.properties() || {};\n  if (!Object.keys(properties)) {\n    return null;\n  }\n\n  const required = schema.required() || [];\n  const patternProperties = schema.patternProperties();\n  const circularProps = schema.ext('x-parser-circular-props') || [];\n\n  return (\n    <>\n      {Object.entries(properties).map(([propertyName, property]) => (\n        <Schema\n          schema={property}\n          schemaName={propertyName}\n          required={required.includes(propertyName)}\n          isProperty={true}\n          isCircular={circularProps.includes(propertyName)}\n          dependentRequired={SchemaHelpers.getDependentRequired(\n            propertyName,\n            schema,\n          )}\n          key={propertyName}\n        />\n      ))}\n      {Object.entries(patternProperties).map(([propertyName, property]) => (\n        <Schema\n          schema={property}\n          schemaName={propertyName}\n          isPatternProperty={true}\n          isProperty={true}\n          isCircular={circularProps.includes(propertyName)}\n          key={propertyName}\n        />\n      ))}\n    </>\n  );\n};\n\ninterface AdditionalPropertiesProps {\n  schema: SchemaType;\n}\n\nconst AdditionalProperties: React.FunctionComponent<AdditionalPropertiesProps> = ({\n  schema,\n}) => {\n  if (schema.ext(SchemaHelpers.extRenderAdditionalInfo) === false) {\n    return null;\n  }\n\n  let type = schema.type();\n  type = Array.isArray(type) ? type : [type];\n  if (!type.includes('object')) {\n    return null;\n  }\n\n  const additionalProperties = schema.additionalProperties();\n  if (additionalProperties === true || additionalProperties === undefined) {\n    return (\n      <p className=\"mt-2 text-xs text-gray-700\">\n        Additional properties are allowed.\n      </p>\n    );\n  }\n  if (additionalProperties === false) {\n    return (\n      <p className=\"mt-2 text-xs text-gray-700\">\n        Additional properties are <strong>NOT</strong> allowed.\n      </p>\n    );\n  }\n  return (\n    <Schema schemaName=\"Additional properties:\" schema={additionalProperties} />\n  );\n};\n\ninterface SchemaItemsProps {\n  schema: SchemaType;\n}\n\nconst SchemaItems: React.FunctionComponent<SchemaItemsProps> = ({ schema }) => {\n  let type = schema.type();\n  type = Array.isArray(type) ? type : [type];\n  if (!type.includes('array')) {\n    return null;\n  }\n  const items = schema.items();\n\n  // object in items\n  if (\n    items &&\n    !Array.isArray(items) &&\n    Object.keys(items.properties() || {}).length\n  ) {\n    return <SchemaProperties schema={items} />;\n  } else if (Array.isArray(items)) {\n    return (\n      <>\n        {items.map((item, idx) => (\n          <Schema schema={item} schemaName={`${idx + 1} item:`} key={idx} />\n        ))}\n      </>\n    );\n  }\n  return <Schema schema={items} schemaName=\"Items:\" />;\n};\n\ninterface AdditionalItemsProps {\n  schema: SchemaType;\n}\n\nconst AdditionalItems: React.FunctionComponent<AdditionalItemsProps> = ({\n  schema,\n}) => {\n  if (schema.ext(SchemaHelpers.extRenderAdditionalInfo) === false) {\n    return null;\n  }\n\n  let type = schema.type();\n  type = Array.isArray(type) ? type : [type];\n  if (!type.includes('array')) {\n    return null;\n  }\n  if (!Array.isArray(schema.items())) {\n    return null;\n  }\n\n  const additionalItems = schema.additionalItems() as any;\n  if (additionalItems === true || additionalItems === undefined) {\n    return (\n      <p className=\"mt-2 text-xs text-gray-700\">\n        Additional items are allowed.\n      </p>\n    );\n  }\n  if (additionalItems === false) {\n    return (\n      <p className=\"mt-2 text-xs text-gray-700\">\n        Additional items are <strong>NOT</strong> allowed.\n      </p>\n    );\n  }\n  return <Schema schemaName=\"Additional items:\" schema={additionalItems} />;\n};\n"]}