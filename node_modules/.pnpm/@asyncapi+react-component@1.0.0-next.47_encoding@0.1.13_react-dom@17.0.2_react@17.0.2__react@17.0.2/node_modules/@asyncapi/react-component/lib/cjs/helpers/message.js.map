{"version":3,"file":"message.js","sourceRoot":"","sources":["../../../src/helpers/message.ts"],"names":[],"mappings":"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","sourcesContent":["import { Message } from '@asyncapi/parser';\n// @ts-ignore\nimport { sample } from 'openapi-sampler';\n\nimport { MessageExample } from '../types';\n\nexport class MessageHelpers {\n  static generateExample(schema: any, options: any = {}) {\n    try {\n      return this.sanitizeExample(sample(schema, options)) || '';\n    } catch (e) {\n      return '';\n    }\n  }\n\n  static sanitizeExample(schema: any): any {\n    if (typeof schema === 'object' && schema && !Array.isArray(schema)) {\n      return Object.entries(schema).reduce((obj, [propertyName, property]) => {\n        if (\n          !propertyName.startsWith('x-parser-') &&\n          !propertyName.startsWith('x-schema-private-')\n        ) {\n          obj[propertyName] = this.sanitizeExample(property);\n        }\n        return obj;\n      }, {});\n    }\n    return schema;\n  }\n\n  static getPayloadExamples(msg: Message): MessageExample[] | undefined {\n    const examples = msg.examples();\n    if (Array.isArray(examples) && examples.some(e => e.payload)) {\n      const messageExamples = examples\n        .flatMap(e => {\n          if (!e.payload) {\n            return;\n          }\n          return {\n            name: e.name,\n            summary: e.summary,\n            example: e.payload,\n          };\n        })\n        .filter(Boolean) as MessageExample[];\n\n      if (messageExamples.length > 0) {\n        return messageExamples;\n      }\n    }\n\n    const payload = msg.payload();\n    if (payload && payload.examples()) {\n      return payload.examples().map(example => ({ example }));\n    }\n\n    return;\n  }\n\n  static getHeadersExamples(msg: Message): MessageExample[] | undefined {\n    const examples = msg.examples();\n    if (Array.isArray(examples) && examples.some(e => e.headers)) {\n      const messageExamples = examples\n        .flatMap(e => {\n          if (!e.headers) {\n            return;\n          }\n          return {\n            name: e.name,\n            summary: e.summary,\n            example: e.headers,\n          };\n        })\n        .filter(Boolean) as MessageExample[];\n\n      if (messageExamples.length > 0) {\n        return messageExamples;\n      }\n    }\n\n    const headers = msg.headers();\n    if (headers && headers.examples()) {\n      return headers.examples().map(example => ({ example }));\n    }\n\n    return;\n  }\n}\n"]}